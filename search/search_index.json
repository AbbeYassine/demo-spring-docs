{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Initialisation du Projet Allez vers SPRING INITIALIZR Gradle Config Ajouter org.springframework.boot:spring-boot-starter-web dans le fichier build.gradle dans la section dependencies dependencies { compile ( \"org.springframework.boot:spring-boot-starter-web\" ) implementation 'org.springframework.boot:spring-boot-starter' testImplementation 'org.springframework.boot:spring-boot-starter-test' } Notre 1\u00e9re Web Service Cr\u00e9er la classe HelloController.java contenant le code suivant: import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RestController ; @RestController public class HelloController { @RequestMapping ( \"/\" ) public String index () { return \"Hello World !!!\" ; } } Info Vous remarquez que la r\u00e9ponse est sous format String, Comment on fait pour devenir sous format JSON ? R\u00e9ponse JSON Cr\u00e9er la classe SimpleResponse.java contenant le code suivant: public class SimpleResponse { private String message ; public SimpleResponse ( String message ) { this . message = message ; } public String getMessage () { return message ; } public void setMessage ( String message ) { this . message = message ; } } Ajoutant une autre m\u00e9thode nomm\u00e9 indexJson() dans notre controller: @RequestMapping ( \"/json\" ) public SimpleResponse indexJson () { return new SimpleResponse ( \"Hello World\" ); } Tester le projet Vous pouvez maintenant tester nos web services sur http://localhost:8080","title":"Initialisation Du Projet"},{"location":"#initialisation-du-projet","text":"Allez vers SPRING INITIALIZR","title":"Initialisation du Projet"},{"location":"#gradle-config","text":"Ajouter org.springframework.boot:spring-boot-starter-web dans le fichier build.gradle dans la section dependencies dependencies { compile ( \"org.springframework.boot:spring-boot-starter-web\" ) implementation 'org.springframework.boot:spring-boot-starter' testImplementation 'org.springframework.boot:spring-boot-starter-test' }","title":"Gradle Config"},{"location":"#notre-1ere-web-service","text":"Cr\u00e9er la classe HelloController.java contenant le code suivant: import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RestController ; @RestController public class HelloController { @RequestMapping ( \"/\" ) public String index () { return \"Hello World !!!\" ; } } Info Vous remarquez que la r\u00e9ponse est sous format String, Comment on fait pour devenir sous format JSON ?","title":"Notre 1\u00e9re Web Service"},{"location":"#reponse-json","text":"Cr\u00e9er la classe SimpleResponse.java contenant le code suivant: public class SimpleResponse { private String message ; public SimpleResponse ( String message ) { this . message = message ; } public String getMessage () { return message ; } public void setMessage ( String message ) { this . message = message ; } } Ajoutant une autre m\u00e9thode nomm\u00e9 indexJson() dans notre controller: @RequestMapping ( \"/json\" ) public SimpleResponse indexJson () { return new SimpleResponse ( \"Hello World\" ); }","title":"R\u00e9ponse JSON"},{"location":"#tester-le-projet","text":"Vous pouvez maintenant tester nos web services sur http://localhost:8080","title":"Tester le projet"},{"location":"hibernate/","text":"Spring Hibernate Diagramme UML Dans notre projet on va utiliser la conception suivante: Gradle Config Pour int\u00e9grer Hibernate dans le projet, il faut ajouter ces ligne de code dans le fichier build.gradle : buildscript { ext { // ****** jpaVersion = \"2.1.1.RELEASE\" mysqlConnectorVersion = \"8.0.13\" } // **** } dependencies { // ****** /** * MySql */ compile group: 'org.springframework.boot' , name: 'spring-boot-starter-data-jpa' , version: \"${jpaVersion}\" compile group: 'mysql' , name: 'mysql-connector-java' , version: \"${mysqlConnectorVersion}\" // ***** implementation 'org.springframework.boot:spring-boot-starter' testImplementation 'org.springframework.boot:spring-boot-starter-test' } Cr\u00e9ation des Models Par la suite on va cr\u00e9er un package Model contenant tous nos entit\u00e9s du projet Model User @Entity public class User { @Id @GeneratedValue ( strategy = GenerationType . AUTO ) private Integer id ; @Column ( name = \"first_name\" ) private String firstName ; @Column ( name = \"last_name\" ) private String lastName ; @Column ( unique = true , nullable = false ) private String email ; @Column private String password ; @ElementCollection ( fetch = FetchType . EAGER ) private List < Role > roles ; @OneToMany ( mappedBy = \"user\" ) private List < Order > orders ; } ENUM Role public enum Role { ROLE_ADMIN , ROLE_CLIENT ; } Model Product @Entity public class Product { @Id @GeneratedValue ( strategy = GenerationType . AUTO ) private Integer id ; @Column private String name ; @Nullable @Column private String description ; @Column private Double price ; @OneToMany ( mappedBy = \"product\" ) private List < Picture > pictures ; } Model Order @Entity @Table ( name = \"Orders\" ) public class Order { @Id @GeneratedValue ( strategy = GenerationType . AUTO ) private Integer id ; @ManyToOne private User user ; @OneToMany ( mappedBy = \"order\" ) private List < OrderLine > orderLines ; @CreatedDate @Column ( name = \"created_date\" ) private Date createdDate ; } Info L'annotation @Table nous permet de sp\u00e9cifier un autre nom de table, on a modifier dans ce cas le nom du table par d\u00e9faut car le nom Order est un nom r\u00e9serv\u00e9 dans MySQL Model OrderLine @Entity ( name = \"Order_Line\" ) public class OrderLine { @Id @GeneratedValue ( strategy = GenerationType . AUTO ) private Integer id ; @Column private Integer quantity ; @ManyToOne private Product product ; @ManyToOne private Order order ; } Model Picture @Entity public class Picture { @Id @GeneratedValue ( strategy = GenerationType . AUTO ) private Integer id ; @Column private String path ; @ManyToOne private Product product ; } Configuration Hibernate Dans le fichier application.yml ajouter le code suivant: spring: jpa: hibernate: ddl - auto: update datasource: username: root password: url: jdbc:mysql: //localhost:3306/demoSpring?createDatabaseIfNotExist=true&serverTimezone=UTC driver - class - name: com . mysql . cj . jdbc . Driver","title":"Spring Hibernate"},{"location":"hibernate/#spring-hibernate","text":"","title":"Spring Hibernate"},{"location":"hibernate/#diagramme-uml","text":"Dans notre projet on va utiliser la conception suivante:","title":"Diagramme UML"},{"location":"hibernate/#gradle-config","text":"Pour int\u00e9grer Hibernate dans le projet, il faut ajouter ces ligne de code dans le fichier build.gradle : buildscript { ext { // ****** jpaVersion = \"2.1.1.RELEASE\" mysqlConnectorVersion = \"8.0.13\" } // **** } dependencies { // ****** /** * MySql */ compile group: 'org.springframework.boot' , name: 'spring-boot-starter-data-jpa' , version: \"${jpaVersion}\" compile group: 'mysql' , name: 'mysql-connector-java' , version: \"${mysqlConnectorVersion}\" // ***** implementation 'org.springframework.boot:spring-boot-starter' testImplementation 'org.springframework.boot:spring-boot-starter-test' }","title":"Gradle Config"},{"location":"hibernate/#creation-des-models","text":"Par la suite on va cr\u00e9er un package Model contenant tous nos entit\u00e9s du projet","title":"Cr\u00e9ation des Models"},{"location":"hibernate/#model-user","text":"@Entity public class User { @Id @GeneratedValue ( strategy = GenerationType . AUTO ) private Integer id ; @Column ( name = \"first_name\" ) private String firstName ; @Column ( name = \"last_name\" ) private String lastName ; @Column ( unique = true , nullable = false ) private String email ; @Column private String password ; @ElementCollection ( fetch = FetchType . EAGER ) private List < Role > roles ; @OneToMany ( mappedBy = \"user\" ) private List < Order > orders ; }","title":"Model User"},{"location":"hibernate/#enum-role","text":"public enum Role { ROLE_ADMIN , ROLE_CLIENT ; }","title":"ENUM Role"},{"location":"hibernate/#model-product","text":"@Entity public class Product { @Id @GeneratedValue ( strategy = GenerationType . AUTO ) private Integer id ; @Column private String name ; @Nullable @Column private String description ; @Column private Double price ; @OneToMany ( mappedBy = \"product\" ) private List < Picture > pictures ; }","title":"Model Product"},{"location":"hibernate/#model-order","text":"@Entity @Table ( name = \"Orders\" ) public class Order { @Id @GeneratedValue ( strategy = GenerationType . AUTO ) private Integer id ; @ManyToOne private User user ; @OneToMany ( mappedBy = \"order\" ) private List < OrderLine > orderLines ; @CreatedDate @Column ( name = \"created_date\" ) private Date createdDate ; } Info L'annotation @Table nous permet de sp\u00e9cifier un autre nom de table, on a modifier dans ce cas le nom du table par d\u00e9faut car le nom Order est un nom r\u00e9serv\u00e9 dans MySQL","title":"Model Order"},{"location":"hibernate/#model-orderline","text":"@Entity ( name = \"Order_Line\" ) public class OrderLine { @Id @GeneratedValue ( strategy = GenerationType . AUTO ) private Integer id ; @Column private Integer quantity ; @ManyToOne private Product product ; @ManyToOne private Order order ; }","title":"Model OrderLine"},{"location":"hibernate/#model-picture","text":"@Entity public class Picture { @Id @GeneratedValue ( strategy = GenerationType . AUTO ) private Integer id ; @Column private String path ; @ManyToOne private Product product ; }","title":"Model Picture"},{"location":"hibernate/#configuration-hibernate","text":"Dans le fichier application.yml ajouter le code suivant: spring: jpa: hibernate: ddl - auto: update datasource: username: root password: url: jdbc:mysql: //localhost:3306/demoSpring?createDatabaseIfNotExist=true&serverTimezone=UTC driver - class - name: com . mysql . cj . jdbc . Driver","title":"Configuration Hibernate"},{"location":"springrest/","text":"Spring REST On va exposer l'API pour les produits, pour le moment un simple CRUD. Cr\u00e9er un controlleur nomm\u00e9 ProductController.java : @RestController () @RequestMapping ( \"/api/product\" ) public class ProductController { } Injection du Couche Service Inj\u00e9cter IProductService afin de b\u00e9n\u00e9ficier des m\u00e9thodes pour acc\u00e9eder aux donn\u00e9es \u00e0 traver la mot cl\u00e9 @Autowired . @RestController () @RequestMapping ( \"/api/product\" ) public class ProductController { @Autowired private IProductService productService ; } Ajout d'un produit Ajouter ce bout de code dans le controleur: @RestController () @RequestMapping ( \"/api/product\" ) public class ProductController { @Autowired private IProductService productService ; @PostMapping ( \"/add\" ) @ResponseStatus ( HttpStatus . CREATED ) public Product add ( @RequestBody Product product ) { return productService . add ( product ); } } Cr\u00e9er une interface IProductService.java et une classe ProductService.java qui impl\u00e9mente cette interface. // IProductService.java public interface IProductService { Product add ( Product product ); } // ProductService.java @Service public class ProductService implements IProductService { @Autowired private ProductRepository productRepository ; @Override public Product add ( Product product ) { return productRepository . save ( product ); } } Cr\u00e9er une interface ProductRepository.java qui h\u00e9rite de l'interface JpaRepository public interface ProductRepository extends JpaRepository < Product , Integer > { } Tester avec postMan Example de requ\u00e9te Example de r\u00e9ponse Affichage liste des produits Ajouter ce bout de code dans le controleur: @RestController () @RequestMapping ( \"/api/product\" ) public class ProductController { @Autowired private IProductService productService ; @GetMapping ( \"\" ) @ResponseStatus ( HttpStatus . ACCEPTED ) public List < Product > getAll () { return productService . getAll (); } } // IProductService.java public interface IProductService { List < Product > getAll (); } // ProductService.java @Service public class ProductService implements IProductService { @Autowired private ProductRepository productRepository ; @Override public List < Product > getAll () { return productRepository . findAll (); } } Affichage du produit par son id Ajouter ce bout de code dans le controleur: @RestController () @RequestMapping ( \"/api/product\" ) public class ProductController { @Autowired private IProductService productService ; @GetMapping ( \"/{productId}\" ) @ResponseStatus ( HttpStatus . OK ) public Product getById ( @PathVariable ( \"productId\" ) Integer productId ) { return productService . getById ( productId ); } } // IProductService.java public interface IProductService { Product getById ( Integer productId ); } // ProductService.java @Service public class ProductService implements IProductService { @Autowired private ProductRepository productRepository ; @Override public Product getById ( Integer productId ) { return productRepository . findById ( productId ). orElse ( null ); } } Modification d'un produit Ajouter ProductDTO.java pour notre requ\u00e9te de modification: public class ProductDTO { private String name ; private String description ; private Double price ; } Warning N'oublier pas les getters/setters !! On va ajouter le plugin ModelMapper afin de mapper entre notre DTO et notre objet Product.java gradle.build : dependencies { //**** compile group: 'org.modelmapper' , name: 'modelmapper' , version: '1.1.0' implementation 'org.springframework.boot:spring-boot-starter' testImplementation 'org.springframework.boot:spring-boot-starter-test' } @RestController () @RequestMapping ( \"/api/product\" ) public class ProductController { @Autowired private IProductService productService ; @Autowired private ModelMapper modelMapper ; @PutMapping ( \"/{productId}\" ) @ResponseStatus ( HttpStatus . OK ) public Product update ( @PathVariable ( \"productId\" ) Integer productId , @RequestBody ProductDTO productDTO ) { Product product = productService . getById ( productId ); if ( product != null ) { Product productData = modelMapper . map ( productDTO , Product . class ); return productService . update ( product , productData ); } return null ; } } Info Remarquez-vous que le code ne fonctionne pas ? En faite il faut que le modelMapper sera inject\u00e9 dans notre application, il n'est pas inject\u00e9 par defaut. Pour ce l\u00e0: // DemoSpringApplication @SpringBootApplication public class DemoSpringApplication { // ****** @Bean public ModelMapper modelMapper () { return new ModelMapper (); } } // IProductService.java public interface IProductService { Product update ( Product product , Product productData ); } // ProductService.java @Service public class ProductService implements IProductService { @Autowired private ProductRepository productRepository ; @Override public Product update ( Product product , Product productData ) { if ( productData . getName () != null ) { product . setName ( productData . getName ()); } if ( productData . getDescription () != null ) { product . setDescription ( productData . getDescription ()); } if ( productData . getPrice () != null ) { product . setPrice ( productData . getPrice ()); } return productRepository . save ( product ); } } Suppression d'un produit Ajouter ce bout de code dans le controleur: @RestController () @RequestMapping ( \"/api/product\" ) public class ProductController { @Autowired private IProductService productService ; @DeleteMapping ( \"/{productId}\" ) @ResponseStatus ( HttpStatus . OK ) public SimpleResponse delete ( @PathVariable ( \"productId\" ) Integer productId ) { Product product = productService . getById ( productId ); if ( product != null ) { productService . delete ( productId ); return new SimpleResponse ( \"Delete product success\" ); } return null ; } } // IProductService.java public interface IProductService { void delete ( Integer productId ); } // ProductService.java @Service public class ProductService implements IProductService { @Autowired private ProductRepository productRepository ; @Override public void delete ( Integer productId ) { productRepository . deleteById ( productId ); } } Warning Il va falloir ajouter @JsonIgnore dans Picture.java comme suit: @Entity public class Picture { // **** @ManyToOne @JsonIgnore private Product product ; }","title":"Spring REST"},{"location":"springrest/#spring-rest","text":"On va exposer l'API pour les produits, pour le moment un simple CRUD. Cr\u00e9er un controlleur nomm\u00e9 ProductController.java : @RestController () @RequestMapping ( \"/api/product\" ) public class ProductController { }","title":"Spring REST"},{"location":"springrest/#injection-du-couche-service","text":"Inj\u00e9cter IProductService afin de b\u00e9n\u00e9ficier des m\u00e9thodes pour acc\u00e9eder aux donn\u00e9es \u00e0 traver la mot cl\u00e9 @Autowired . @RestController () @RequestMapping ( \"/api/product\" ) public class ProductController { @Autowired private IProductService productService ; }","title":"Injection du Couche Service"},{"location":"springrest/#ajout-dun-produit","text":"Ajouter ce bout de code dans le controleur: @RestController () @RequestMapping ( \"/api/product\" ) public class ProductController { @Autowired private IProductService productService ; @PostMapping ( \"/add\" ) @ResponseStatus ( HttpStatus . CREATED ) public Product add ( @RequestBody Product product ) { return productService . add ( product ); } } Cr\u00e9er une interface IProductService.java et une classe ProductService.java qui impl\u00e9mente cette interface. // IProductService.java public interface IProductService { Product add ( Product product ); } // ProductService.java @Service public class ProductService implements IProductService { @Autowired private ProductRepository productRepository ; @Override public Product add ( Product product ) { return productRepository . save ( product ); } } Cr\u00e9er une interface ProductRepository.java qui h\u00e9rite de l'interface JpaRepository public interface ProductRepository extends JpaRepository < Product , Integer > { }","title":"Ajout d'un produit"},{"location":"springrest/#tester-avec-postman","text":"","title":"Tester avec postMan"},{"location":"springrest/#example-de-requete","text":"","title":"Example de requ\u00e9te"},{"location":"springrest/#example-de-reponse","text":"","title":"Example de r\u00e9ponse"},{"location":"springrest/#affichage-liste-des-produits","text":"Ajouter ce bout de code dans le controleur: @RestController () @RequestMapping ( \"/api/product\" ) public class ProductController { @Autowired private IProductService productService ; @GetMapping ( \"\" ) @ResponseStatus ( HttpStatus . ACCEPTED ) public List < Product > getAll () { return productService . getAll (); } } // IProductService.java public interface IProductService { List < Product > getAll (); } // ProductService.java @Service public class ProductService implements IProductService { @Autowired private ProductRepository productRepository ; @Override public List < Product > getAll () { return productRepository . findAll (); } }","title":"Affichage liste des produits"},{"location":"springrest/#affichage-du-produit-par-son-id","text":"Ajouter ce bout de code dans le controleur: @RestController () @RequestMapping ( \"/api/product\" ) public class ProductController { @Autowired private IProductService productService ; @GetMapping ( \"/{productId}\" ) @ResponseStatus ( HttpStatus . OK ) public Product getById ( @PathVariable ( \"productId\" ) Integer productId ) { return productService . getById ( productId ); } } // IProductService.java public interface IProductService { Product getById ( Integer productId ); } // ProductService.java @Service public class ProductService implements IProductService { @Autowired private ProductRepository productRepository ; @Override public Product getById ( Integer productId ) { return productRepository . findById ( productId ). orElse ( null ); } }","title":"Affichage du produit par son id"},{"location":"springrest/#modification-dun-produit","text":"Ajouter ProductDTO.java pour notre requ\u00e9te de modification: public class ProductDTO { private String name ; private String description ; private Double price ; } Warning N'oublier pas les getters/setters !! On va ajouter le plugin ModelMapper afin de mapper entre notre DTO et notre objet Product.java gradle.build : dependencies { //**** compile group: 'org.modelmapper' , name: 'modelmapper' , version: '1.1.0' implementation 'org.springframework.boot:spring-boot-starter' testImplementation 'org.springframework.boot:spring-boot-starter-test' } @RestController () @RequestMapping ( \"/api/product\" ) public class ProductController { @Autowired private IProductService productService ; @Autowired private ModelMapper modelMapper ; @PutMapping ( \"/{productId}\" ) @ResponseStatus ( HttpStatus . OK ) public Product update ( @PathVariable ( \"productId\" ) Integer productId , @RequestBody ProductDTO productDTO ) { Product product = productService . getById ( productId ); if ( product != null ) { Product productData = modelMapper . map ( productDTO , Product . class ); return productService . update ( product , productData ); } return null ; } } Info Remarquez-vous que le code ne fonctionne pas ? En faite il faut que le modelMapper sera inject\u00e9 dans notre application, il n'est pas inject\u00e9 par defaut. Pour ce l\u00e0: // DemoSpringApplication @SpringBootApplication public class DemoSpringApplication { // ****** @Bean public ModelMapper modelMapper () { return new ModelMapper (); } } // IProductService.java public interface IProductService { Product update ( Product product , Product productData ); } // ProductService.java @Service public class ProductService implements IProductService { @Autowired private ProductRepository productRepository ; @Override public Product update ( Product product , Product productData ) { if ( productData . getName () != null ) { product . setName ( productData . getName ()); } if ( productData . getDescription () != null ) { product . setDescription ( productData . getDescription ()); } if ( productData . getPrice () != null ) { product . setPrice ( productData . getPrice ()); } return productRepository . save ( product ); } }","title":"Modification d'un produit"},{"location":"springrest/#suppression-dun-produit","text":"Ajouter ce bout de code dans le controleur: @RestController () @RequestMapping ( \"/api/product\" ) public class ProductController { @Autowired private IProductService productService ; @DeleteMapping ( \"/{productId}\" ) @ResponseStatus ( HttpStatus . OK ) public SimpleResponse delete ( @PathVariable ( \"productId\" ) Integer productId ) { Product product = productService . getById ( productId ); if ( product != null ) { productService . delete ( productId ); return new SimpleResponse ( \"Delete product success\" ); } return null ; } } // IProductService.java public interface IProductService { void delete ( Integer productId ); } // ProductService.java @Service public class ProductService implements IProductService { @Autowired private ProductRepository productRepository ; @Override public void delete ( Integer productId ) { productRepository . deleteById ( productId ); } } Warning Il va falloir ajouter @JsonIgnore dans Picture.java comme suit: @Entity public class Picture { // **** @ManyToOne @JsonIgnore private Product product ; }","title":"Suppression d'un produit"}]}