{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Initialisation du Projet Allez vers SPRING INITIALIZR Gradle Config Ajouter org.springframework.boot:spring-boot-starter-web dans le fichier build.gradle dans la section dependencies dependencies { compile ( \"org.springframework.boot:spring-boot-starter-web\" ) implementation 'org.springframework.boot:spring-boot-starter' testImplementation 'org.springframework.boot:spring-boot-starter-test' } Notre 1\u00e9re Web Service Cr\u00e9er la classe HelloController.java contenant le code suivant: import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RestController ; @RestController public class HelloController { @RequestMapping ( \"/\" ) public String index () { return \"Hello World !!!\" ; } } Info Vous remarquez que la r\u00e9ponse est sous format String, Comment on fait pour devenir sous format JSON ? R\u00e9ponse JSON Cr\u00e9er la classe SimpleResponse.java contenant le code suivant: public class SimpleResponse { private String message ; public SimpleResponse ( String message ) { this . message = message ; } public String getMessage () { return message ; } public void setMessage ( String message ) { this . message = message ; } } Ajoutant une autre m\u00e9thode nomm\u00e9 indexJson() dans notre controller: @RequestMapping ( \"/json\" ) public SimpleResponse indexJson () { return new SimpleResponse ( \"Hello World\" ); } Tester le projet Vous pouvez maintenant tester nos web services sur http://localhost:8080","title":"Initialisation Du Projet"},{"location":"#initialisation-du-projet","text":"Allez vers SPRING INITIALIZR","title":"Initialisation du Projet"},{"location":"#gradle-config","text":"Ajouter org.springframework.boot:spring-boot-starter-web dans le fichier build.gradle dans la section dependencies dependencies { compile ( \"org.springframework.boot:spring-boot-starter-web\" ) implementation 'org.springframework.boot:spring-boot-starter' testImplementation 'org.springframework.boot:spring-boot-starter-test' }","title":"Gradle Config"},{"location":"#notre-1ere-web-service","text":"Cr\u00e9er la classe HelloController.java contenant le code suivant: import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RestController ; @RestController public class HelloController { @RequestMapping ( \"/\" ) public String index () { return \"Hello World !!!\" ; } } Info Vous remarquez que la r\u00e9ponse est sous format String, Comment on fait pour devenir sous format JSON ?","title":"Notre 1\u00e9re Web Service"},{"location":"#reponse-json","text":"Cr\u00e9er la classe SimpleResponse.java contenant le code suivant: public class SimpleResponse { private String message ; public SimpleResponse ( String message ) { this . message = message ; } public String getMessage () { return message ; } public void setMessage ( String message ) { this . message = message ; } } Ajoutant une autre m\u00e9thode nomm\u00e9 indexJson() dans notre controller: @RequestMapping ( \"/json\" ) public SimpleResponse indexJson () { return new SimpleResponse ( \"Hello World\" ); }","title":"R\u00e9ponse JSON"},{"location":"#tester-le-projet","text":"Vous pouvez maintenant tester nos web services sur http://localhost:8080","title":"Tester le projet"},{"location":"hibernate/","text":"Spring Hibernate Diagramme UML Dans notre projet on va utiliser la conception suivante: Gradle Config Pour int\u00e9grer Hibernate dans le projet, il faut ajouter ces ligne de code dans le fichier build.gradle : buildscript { ext { // ****** jpaVersion = \"2.1.4.RELEASE\" mysqlConnectorVersion = \"8.0.13\" } // **** } dependencies { // ****** /** * MySql */ compile group: 'org.springframework.boot' , name: 'spring-boot-starter-data-jpa' , version: \"${jpaVersion}\" compile group: 'mysql' , name: 'mysql-connector-java' , version: \"${mysqlConnectorVersion}\" // ***** implementation 'org.springframework.boot:spring-boot-starter' testImplementation 'org.springframework.boot:spring-boot-starter-test' } Cr\u00e9ation des Models Par la suite on va cr\u00e9er un package Model contenant tous nos entit\u00e9s du projet Model User @Entity public class User { @Id @GeneratedValue ( strategy = GenerationType . AUTO ) private Integer id ; @Column ( name = \"first_name\" ) private String firstName ; @Column ( name = \"last_name\" ) private String lastName ; @Column ( unique = true , nullable = false ) private String email ; @Column private String password ; @ElementCollection ( fetch = FetchType . EAGER ) private List < Role > roles ; @OneToMany ( mappedBy = \"user\" ) private List < Order > orders ; } ENUM Role public enum Role { ROLE_ADMIN , ROLE_CLIENT ; } Model Product @Entity public class Product { @Id @GeneratedValue ( strategy = GenerationType . AUTO ) private Integer id ; @Column private String name ; @Nullable @Column private String description ; @Column private Double price ; @OneToMany ( mappedBy = \"product\" ) private List < Picture > pictures ; } Model Order @Entity @Table ( name = \"Orders\" ) public class Order { @Id @GeneratedValue ( strategy = GenerationType . AUTO ) private Integer id ; @ManyToOne private User user ; @OneToMany ( mappedBy = \"order\" ) private List < OrderLine > orderLines ; @CreatedDate @Column ( name = \"created_date\" ) private Date createdDate ; } Info L'annotation @Table nous permet de sp\u00e9cifier un autre nom de table, on a modifier dans ce cas le nom du table par d\u00e9faut car le nom Order est un nom r\u00e9serv\u00e9 dans MySQL Model OrderLine @Entity ( name = \"Order_Line\" ) public class OrderLine { @Id @GeneratedValue ( strategy = GenerationType . AUTO ) private Integer id ; @Column private Integer quantity ; @ManyToOne private Product product ; @ManyToOne private Order order ; } Model Picture @Entity public class Picture { @Id @GeneratedValue ( strategy = GenerationType . AUTO ) private Integer id ; @Column private String path ; @ManyToOne private Product product ; } Configuration Hibernate Dans le fichier application.yml ajouter le code suivant: spring: jpa: hibernate: ddl - auto: update datasource: username: root password: url: jdbc:mysql: //localhost:3306/demoSpring?createDatabaseIfNotExist=true&serverTimezone=UTC driver - class - name: com . mysql . cj . jdbc . Driver","title":"Spring Hibernate"},{"location":"hibernate/#spring-hibernate","text":"","title":"Spring Hibernate"},{"location":"hibernate/#diagramme-uml","text":"Dans notre projet on va utiliser la conception suivante:","title":"Diagramme UML"},{"location":"hibernate/#gradle-config","text":"Pour int\u00e9grer Hibernate dans le projet, il faut ajouter ces ligne de code dans le fichier build.gradle : buildscript { ext { // ****** jpaVersion = \"2.1.4.RELEASE\" mysqlConnectorVersion = \"8.0.13\" } // **** } dependencies { // ****** /** * MySql */ compile group: 'org.springframework.boot' , name: 'spring-boot-starter-data-jpa' , version: \"${jpaVersion}\" compile group: 'mysql' , name: 'mysql-connector-java' , version: \"${mysqlConnectorVersion}\" // ***** implementation 'org.springframework.boot:spring-boot-starter' testImplementation 'org.springframework.boot:spring-boot-starter-test' }","title":"Gradle Config"},{"location":"hibernate/#creation-des-models","text":"Par la suite on va cr\u00e9er un package Model contenant tous nos entit\u00e9s du projet","title":"Cr\u00e9ation des Models"},{"location":"hibernate/#model-user","text":"@Entity public class User { @Id @GeneratedValue ( strategy = GenerationType . AUTO ) private Integer id ; @Column ( name = \"first_name\" ) private String firstName ; @Column ( name = \"last_name\" ) private String lastName ; @Column ( unique = true , nullable = false ) private String email ; @Column private String password ; @ElementCollection ( fetch = FetchType . EAGER ) private List < Role > roles ; @OneToMany ( mappedBy = \"user\" ) private List < Order > orders ; }","title":"Model User"},{"location":"hibernate/#enum-role","text":"public enum Role { ROLE_ADMIN , ROLE_CLIENT ; }","title":"ENUM Role"},{"location":"hibernate/#model-product","text":"@Entity public class Product { @Id @GeneratedValue ( strategy = GenerationType . AUTO ) private Integer id ; @Column private String name ; @Nullable @Column private String description ; @Column private Double price ; @OneToMany ( mappedBy = \"product\" ) private List < Picture > pictures ; }","title":"Model Product"},{"location":"hibernate/#model-order","text":"@Entity @Table ( name = \"Orders\" ) public class Order { @Id @GeneratedValue ( strategy = GenerationType . AUTO ) private Integer id ; @ManyToOne private User user ; @OneToMany ( mappedBy = \"order\" ) private List < OrderLine > orderLines ; @CreatedDate @Column ( name = \"created_date\" ) private Date createdDate ; } Info L'annotation @Table nous permet de sp\u00e9cifier un autre nom de table, on a modifier dans ce cas le nom du table par d\u00e9faut car le nom Order est un nom r\u00e9serv\u00e9 dans MySQL","title":"Model Order"},{"location":"hibernate/#model-orderline","text":"@Entity ( name = \"Order_Line\" ) public class OrderLine { @Id @GeneratedValue ( strategy = GenerationType . AUTO ) private Integer id ; @Column private Integer quantity ; @ManyToOne private Product product ; @ManyToOne private Order order ; }","title":"Model OrderLine"},{"location":"hibernate/#model-picture","text":"@Entity public class Picture { @Id @GeneratedValue ( strategy = GenerationType . AUTO ) private Integer id ; @Column private String path ; @ManyToOne private Product product ; }","title":"Model Picture"},{"location":"hibernate/#configuration-hibernate","text":"Dans le fichier application.yml ajouter le code suivant: spring: jpa: hibernate: ddl - auto: update datasource: username: root password: url: jdbc:mysql: //localhost:3306/demoSpring?createDatabaseIfNotExist=true&serverTimezone=UTC driver - class - name: com . mysql . cj . jdbc . Driver","title":"Configuration Hibernate"}]}